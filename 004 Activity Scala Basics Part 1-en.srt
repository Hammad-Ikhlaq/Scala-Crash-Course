1
00:00:00,660 --> 00:00:01,440
So here's the plan.

2
00:00:01,440 --> 00:00:05,310
First I'm going to teach you a little bit about the scala programming language and you need that before

3
00:00:05,310 --> 00:00:07,350
we can actually start writing Spark code in Scala.

4
00:00:07,340 --> 00:00:11,310
So first things first if you already know Scala that's great you can skip this whole section but if

5
00:00:11,310 --> 00:00:15,170
not stick with me to learn some of the basics.

6
00:00:15,170 --> 00:00:16,320
All right let's learn Scala.

7
00:00:16,320 --> 00:00:20,550
Just to set expectations you're not going to be a Scala expert at the end of watching four videos with

8
00:00:20,550 --> 00:00:21,210
me.

9
00:00:21,210 --> 00:00:25,440
So what I'm really trying to do here is just get you familiar with the syntax of the scala programming

10
00:00:25,440 --> 00:00:30,450
language and introduce some of the basic constructs like how do I call a function in Scala.

11
00:00:30,450 --> 00:00:34,560
How does flow control work?, What are some basic data structures I might use with Scala?  and just show

12
00:00:34,560 --> 00:00:38,760
you enough Scala that it's not going to look scary and intimidating to you as we go through the rest

13
00:00:38,760 --> 00:00:39,650
of the course.

14
00:00:39,900 --> 00:00:43,110
So with that let's talk about scala at a high level first.

15
00:00:43,170 --> 00:00:44,510
First of all, why learn Scala?

16
00:00:44,550 --> 00:00:46,520
Well you've probably never heard of it before.

17
00:00:46,710 --> 00:00:48,630
Maybe you have but you certainly probably don't know it.

18
00:00:48,630 --> 00:00:53,790
It's mostly used for spark programming but it is uniquely suited for Spark because it's really structured

19
00:00:53,790 --> 00:00:58,140
in a way that lends itself to doing distributed processing of data over a cluster.

20
00:00:58,210 --> 00:00:59,900
You'll see why a little bit later on.

21
00:01:00,360 --> 00:01:02,510
It's also what SPARK itself is built with.

22
00:01:02,520 --> 00:01:07,340
So by learning Scala You'll get access to all the latest and greatest SPARK features as they come out

23
00:01:07,530 --> 00:01:12,570
and it can usually take a pretty long time for these features to trickle down to a Python support within

24
00:01:12,570 --> 00:01:18,050
Spark and it's also going to be the most efficient way to run Spark code itself.

25
00:01:18,060 --> 00:01:22,830
So by using Scala you will have the fastest and the most reliable SPARK jobs that you can possibly create

26
00:01:22,830 --> 00:01:23,170
.

27
00:01:23,220 --> 00:01:27,870
And I think you'd be pretty surprised at just how much faster and how much more reliable the same spark

28
00:01:27,870 --> 00:01:32,670
job rate in Scala is compared to say the same SPARK job written in Python.

29
00:01:32,670 --> 00:01:37,170
So even though it might be tempting to go off and stick with the language you already know, learning Scala

30
00:01:37,170 --> 00:01:39,250
is worth the effort and it's really not that hard.

31
00:01:39,270 --> 00:01:44,370
Truth is the same spark code for Scala and Python look very similar to each other at the end of the day

32
00:01:44,370 --> 00:01:45,710
.

33
00:01:45,750 --> 00:01:48,920
Now scala itself runs on top of the Java virtual machine.

34
00:01:48,930 --> 00:01:52,710
So it just compiles down to Java bytecode and gets run by the JVM.

35
00:01:52,710 --> 00:01:57,870
So one nice thing about that is that you also have access to all of Java. If there's a Java library you

36
00:01:57,870 --> 00:02:01,650
want to pull into your Scala code you can do that so you're not limited to what's in the Scala language

37
00:02:01,650 --> 00:02:02,450
itself.

38
00:02:02,550 --> 00:02:06,380
Actually reach down to the Java layer and pull up bits of Java that you want to use to.

39
00:02:06,600 --> 00:02:10,290
And we'll do that later in this course for example for dealing with regular expressions and a little

40
00:02:10,290 --> 00:02:13,380
bit more of an intuitive matter than you could otherwise.

41
00:02:13,380 --> 00:02:18,180
Another key point about scala is that it is focused around what is called functional programming where

42
00:02:18,180 --> 00:02:21,150
functions are sort of the crux of what we're dealing with.

43
00:02:21,150 --> 00:02:26,130
Functions get passed to other functions and chained together in ways you might not be used to.

44
00:02:26,220 --> 00:02:28,700
But this is really how SPARK works at a fundamental level.

45
00:02:28,710 --> 00:02:34,260
You know we basically take the abstraction over a chunk of data and we assign it a function to do some

46
00:02:34,260 --> 00:02:38,970
processing on that data and functional programming and Scala makes that very intuitive to do from

47
00:02:38,970 --> 00:02:40,830
a language standpoint.

48
00:02:40,830 --> 00:02:44,320
So with that let's dive in first a little bit of an administrative note.

49
00:02:44,820 --> 00:02:49,800
So as we go through these introductory Scala courses I'm going to attach the actual source code files

50
00:02:49,800 --> 00:02:53,400
to each lecture assuming we are on a platform that supports that sort of thing.

51
00:02:53,670 --> 00:02:56,870
So you know feel free to just download those as we do in the videos.

52
00:02:56,910 --> 00:03:01,560
Now if you did in the previous lecture download the entire big chunk of all of the course materials

53
00:03:01,560 --> 00:03:02,780
all at once.

54
00:03:02,790 --> 00:03:04,080
Same files are going to be in there too.

55
00:03:04,080 --> 00:03:08,220
So if you want to just imported from wherever you'd save those course materials that's fine too.

56
00:03:08,220 --> 00:03:10,880
Either way works so just don't get confused by that.

57
00:03:10,900 --> 00:03:13,830
And with that let's take a look at some actual Scala code.

58
00:03:13,830 --> 00:03:16,290
All right let's learn some Scala, shall we?.

59
00:03:16,290 --> 00:03:21,060
So first thing I want you to do is go to the resources for this lecture and download the LearningScala1.sc

60
00:03:21,060 --> 00:03:27,480
file that's the Scala workbook file, worksheet file and just download that wherever you download

61
00:03:27,480 --> 00:03:31,440
your stuff in your Downloads folder and hit pause while you go take care of that please.

62
00:03:31,440 --> 00:03:34,620
I'll stay here and wait for you.

63
00:03:34,920 --> 00:03:35,360
Done.

64
00:03:35,370 --> 00:03:36,800
All right let's move on.

65
00:03:37,320 --> 00:03:42,630
So I've opened up the Scala IDE here by opening at my Eclipse shortcut on the desktop and what I want

66
00:03:42,630 --> 00:03:51,390
you to do next is go to the file menu and saying new scalla project and let's call this project LearningScala

67
00:03:51,420 --> 00:03:53,110
Shall we?

68
00:03:53,430 --> 00:03:55,550
Just like that.

69
00:03:56,940 --> 00:03:57,230
All right.

70
00:03:57,240 --> 00:04:02,550
Now we do actually need a separate project for these worksheet files and all the reasons are complicated

71
00:04:02,550 --> 00:04:02,580
.

72
00:04:02,580 --> 00:04:06,840
Basically there's a conflict with a scala version that we used in the other project but just go with

73
00:04:06,840 --> 00:04:07,360
it.

74
00:04:07,710 --> 00:04:14,250
So go ahead and right click on that LearningScala project and hit import and go to the file system

75
00:04:14,970 --> 00:04:19,890
and select whatever folder you download stuff from your browser into wherever you downloaded that

76
00:04:19,890 --> 00:04:20,930
LearningScala1.sc file.

77
00:04:20,940 --> 00:04:29,850
So for me that's the C downloads folder and we'll select LearningScala1.sc and just hit finish

78
00:04:31,380 --> 00:04:36,990
and we should have if we open up LearningScala1.sc and  go ahead and double

79
00:04:36,990 --> 00:04:37,880
click on that.

80
00:04:37,980 --> 00:04:39,070
And here we go.

81
00:04:39,510 --> 00:04:44,020
Now what we're looking at here is what's called a scala worksheet, it is kind of like a notebook in Python

82
00:04:44,040 --> 00:04:49,010
and that you can actually interactively enter commands and see them evaluated right in line there.

83
00:04:49,020 --> 00:04:53,490
So you wouldn't, you know go and write a real script this way but it's a good way to get familiar with

84
00:04:53,490 --> 00:04:57,570
the language and just sort of experiment and try different commands and you can immediately see the

85
00:04:57,570 --> 00:04:58,760
effect they have.

86
00:04:59,130 --> 00:05:03,480
So what's going on here is you know you have a line of code and after you evaluate it which happens

87
00:05:03,480 --> 00:05:07,470
automatically whenever you save the worksheet, it will tell you over here on the right the actual output

88
00:05:07,470 --> 00:05:13,320
from the Scala interpreter that resulted from that commands so very good way to see you know what you're

89
00:05:13,320 --> 00:05:14,350
typing in for code.

90
00:05:14,400 --> 00:05:19,650
And the result that code has immediately Pretty cool stuff so let's just dive in and take a look at

91
00:05:19,650 --> 00:05:21,230
some of the scalla code.

92
00:05:21,600 --> 00:05:28,410
So you know every language has its variables right and variables can be mutable or immutable and mutable

93
00:05:28,410 --> 00:05:30,010
means they can be changed.

94
00:05:30,030 --> 00:05:31,740
Immutable means they can't be changed.

95
00:05:31,740 --> 00:05:36,510
So in other languages that might be a constant variable or a final variable depending on the language

96
00:05:36,510 --> 00:05:37,920
we're talking about.

97
00:05:37,920 --> 00:05:43,200
Now in Scala they encourage the use of immutable variables as much as possible and those are called

98
00:05:43,200 --> 00:05:51,270
'val' values with key word 'val'. So the syntax here for declaring a string value is a little bit unusual

99
00:05:51,280 --> 00:05:51,400
.

100
00:05:51,510 --> 00:05:53,230
Let's look at what's going on here.

101
00:05:53,280 --> 00:05:54,190
So we have val.

102
00:05:54,210 --> 00:05:57,350
I mean that is an immutable constant right.

103
00:05:57,390 --> 00:05:59,600
Name this immutable constant.

104
00:05:59,610 --> 00:06:00,410
hello.

105
00:06:00,720 --> 00:06:02,500
It's going to be of type string.

106
00:06:02,640 --> 00:06:05,600
And then I said it's value to Hola!.

107
00:06:06,510 --> 00:06:08,910
So val hello.

108
00:06:09,250 --> 00:06:12,540
Colon string equals value. So that syntax here val,

109
00:06:12,540 --> 00:06:13,670
Meaning it's immutable.

110
00:06:13,860 --> 00:06:19,040
Hello is the name of the variable colon and then the type equals whatever it is.

111
00:06:19,050 --> 00:06:22,540
OK so that's how we declare an immutable value in Scala.

112
00:06:23,040 --> 00:06:26,810
Now just to show you that it actually works let's change that to.

113
00:06:27,060 --> 00:06:30,260
I don't know what's French for Hola.

114
00:06:32,100 --> 00:06:34,940
Now watch out what happens when I hit control as to save it.

115
00:06:35,010 --> 00:06:39,570
This actually all gets interpreted again, for she goes to the bottom of the file when I do that.

116
00:06:39,570 --> 00:06:46,560
But if we scroll back up and see that announces Hello string equals bonjour and we can print out the

117
00:06:46,560 --> 00:06:48,900
value of that string with a print line command.

118
00:06:48,900 --> 00:06:51,790
So in Scala that's how you print out a line of output.

119
00:06:52,050 --> 00:06:56,490
Print line parentheses hello, the value name will print out.

120
00:06:56,510 --> 00:06:58,260
I'll put the value.

121
00:06:58,680 --> 00:06:59,690
So there you have it.

122
00:06:59,910 --> 00:07:02,240
Very simple strengthed very simple there.

123
00:07:02,250 --> 00:07:08,790
Now if you although Scala encourages using immutable values, you can also use mutable variables as well.

124
00:07:08,820 --> 00:07:11,360
If you need to sometimes you just can't get around it.

125
00:07:11,400 --> 00:07:14,650
So if you need to do that you use the var keyword instead of val.

126
00:07:14,760 --> 00:07:21,660
So here we have an example where we have hello there which is initially set to the value that we had

127
00:07:21,690 --> 00:07:24,950
in hello, which you remember we sent to Bonjour.

128
00:07:25,620 --> 00:07:33,030
So here we are assigning a variable called helloThere and assigning it the value hello hello referring

129
00:07:33,030 --> 00:07:38,170
to this value up here that contains a string Bonjour. With me?, so far makes sense?.

130
00:07:38,190 --> 00:07:42,140
If you've done any programming before you can probably follow along whats going on here.

131
00:07:42,150 --> 00:07:48,900
So at this point the value of the helloThere variable is set to the string Bonjour. Sure?,  because thats what my

132
00:07:48,900 --> 00:07:54,540
hello value was set to now because its a variable I can actually change it. So I can say helloThere

133
00:07:54,540 --> 00:07:56,880
Equals hello plus the string "There!".

134
00:07:56,880 --> 00:08:02,730
So I'm changing the value of helloThere from Bonjour! to Bonjour! There!. And you can see that when

135
00:08:02,730 --> 00:08:06,260
I print that out indeed it does contain Bonjour! There!.

136
00:08:06,660 --> 00:08:10,700
And just for fun we can change this back to hello up here.

137
00:08:11,190 --> 00:08:16,200
Watch everything get re-evaluated when I save it and now it says hello there instead.

138
00:08:16,620 --> 00:08:16,860
OK.

139
00:08:16,860 --> 00:08:17,580
So you got it.

140
00:08:17,640 --> 00:08:24,330
Basically there are val's that are immutable, var's that are immutable and the syntax and scala are

141
00:08:24,330 --> 00:08:29,390
a little bit weird for declaring things you have the variable name colon type equals whatever you're

142
00:08:29,430 --> 00:08:30,290
assigning it to.

143
00:08:30,360 --> 00:08:32,950
OK so that's a little bit backwards for most languages.

144
00:08:33,060 --> 00:08:37,560
Takes a little bit of getting used to it, but you'll get the hang of it.

145
00:08:37,770 --> 00:08:42,760
All right so one thing I want to point out is that in functional programming we're using a lot of functions

146
00:08:43,140 --> 00:08:48,600
and the danger of that is that if you have a function that quietly changes the value of something behind

147
00:08:48,600 --> 00:08:50,030
your back that can lead to bugs.

148
00:08:50,100 --> 00:08:51,360
Can lead to unexpected behavior.

149
00:08:51,360 --> 00:08:56,610
So in functional programming languages like scala they really encourage the use of immutable constants

150
00:08:56,610 --> 00:08:57,590
whenever possible.

151
00:08:57,630 --> 00:09:00,870
So you want to be using val whenever you can instead of var.

152
00:09:00,870 --> 00:09:06,870
So instead of using a mutable constant and then modifying it as you go, create new immutable constants

153
00:09:07,110 --> 00:09:08,370
and build them up over time.

154
00:09:08,370 --> 00:09:10,890
So here's an example of how that works.

155
00:09:10,890 --> 00:09:15,840
So let's say I start off with an immutableHelloThere that is initially constructed from the concatenation

156
00:09:15,840 --> 00:09:17,910
of whatever was in my hello string and the string "There!".

157
00:09:17,910 --> 00:09:21,750
So initially I'm just putting Hello there into my

158
00:09:21,750 --> 00:09:22,550
immutableHelloThere.

159
00:09:22,560 --> 00:09:28,260
So you see here I'm actually doing the combination here on the right hand side here and putting it into

160
00:09:28,260 --> 00:09:31,090
the final value where it will be changed.

161
00:09:31,200 --> 00:09:37,000
Now you know you can change these together so you know let's say I want to add something else here.

162
00:09:37,410 --> 00:09:41,160
Let's say I want a new val that's immutable.

163
00:09:41,820 --> 00:09:46,190
More stuff and I can set that too.

164
00:09:47,970 --> 00:09:50,670
Hello!There! plus.

165
00:09:51,780 --> 00:09:53,760
Yeah. I'm just making this up as I go.

166
00:09:53,780 --> 00:09:54,650
Right.

167
00:09:54,680 --> 00:10:00,300
So let's see what that does.

168
00:10:00,300 --> 00:10:02,080
So now I have Hello!There!yeah.

169
00:10:02,340 --> 00:10:08,160
And basically you know I still have two values here one is called immutableHelloThere, one is called

170
00:10:08,160 --> 00:10:08,770
moreStuff.

171
00:10:08,970 --> 00:10:11,050
But I never change the value of

172
00:10:11,060 --> 00:10:11,660
immutableHelloThere.

173
00:10:11,660 --> 00:10:14,650
I never change the value of moreStuff after it was initially created.

174
00:10:14,810 --> 00:10:15,420
OK.

175
00:10:15,630 --> 00:10:21,600
So I kind of like always know what's in this this this symbol this name here it doesn't change and that

176
00:10:21,600 --> 00:10:23,480
makes coding a lot more safe.

177
00:10:23,490 --> 00:10:28,410
I need to go back to that value I can just refer to it by its original name and that's the best practice

178
00:10:28,410 --> 00:10:30,570
for dealing with functional programming.

179
00:10:30,570 --> 00:10:35,730
Now one thing I want to point out to notice that I didn't actually declare the type here Scala can and

180
00:10:35,730 --> 00:10:40,130
actually implicitly figure it out in a lot of cases so I didn't have to say that immutableHelloThere

181
00:10:40,140 --> 00:10:45,540
colon string because it knows that I'm sticking together two strings and that produces a string object

182
00:10:45,540 --> 00:10:46,090
in return.

183
00:10:46,080 --> 00:10:51,600
So in cases where there's really no ambiguity over the type scala can infer it for you automatically

184
00:10:51,600 --> 00:10:56,380
and you don't actually have to do that colon type name syntax all the time.

185
00:10:57,030 --> 00:10:58,630
OK.

186
00:10:58,800 --> 00:11:03,580
Some other types of dealing with strings so far but there's all the usual suspects here.

187
00:11:03,750 --> 00:11:10,320
If you want to integers as an integer type capital I ,we also have boolean values that can be true or false

188
00:11:10,320 --> 00:11:18,150
lowercase are the key words there. If you want a single character you know basically a 256 one of 256

189
00:11:18,150 --> 00:11:24,210
characters 8 8 bit value represent as an ASCII character you can use the carrot type double precision

190
00:11:24,210 --> 00:11:26,660
floating point is double single precision is float.

191
00:11:26,700 --> 00:11:32,530
And notice that we have the usual f suffix here indicating a floating point constant.

192
00:11:32,640 --> 00:11:36,120
Scala is a little bit pickier than other languages in enforcing that use that.

193
00:11:36,120 --> 00:11:41,370
So if you are using single precision constants make sure you remember to put that F at the end.

194
00:11:41,580 --> 00:11:42,400
Double wide integers

195
00:11:42,580 --> 00:11:43,640
is a long.

196
00:11:43,800 --> 00:11:50,820
And we also have a 8 bit value called byte just like in Java that ranges from negative 127 to 127 and

197
00:11:50,820 --> 00:11:53,970
you'll find a lot of these types are very analogous to the types in Java.

198
00:11:54,120 --> 00:11:57,150
Reason being that Scala is built on top of the Java virtual machine.

199
00:11:57,150 --> 00:12:01,450
So there's a lot of transparency between the two languages.

200
00:12:02,250 --> 00:12:03,400
All right moving on.

201
00:12:03,530 --> 00:12:04,410
Take a break now.

202
00:12:04,420 --> 00:12:04,800
It's fine.

203
00:12:04,800 --> 00:12:06,340
Go get a drink you know hit pause.

204
00:12:06,340 --> 00:12:07,490
It's all right.

205
00:12:07,950 --> 00:12:09,600
But let's talk about printing stuff out.

206
00:12:09,630 --> 00:12:16,230
So a common thing you need to do in a language is output human readable stuff very simple to do in Scala.

207
00:12:16,290 --> 00:12:20,180
If you just want to tack a bunch of stuff together you could just use the plus operator to do that.

208
00:12:20,180 --> 00:12:24,750
So you can see I have a bunch of different types of information up here and I can just push them all

209
00:12:24,750 --> 00:12:30,720
together with the plus sign here and create a big old giant strength. So print line is a mess and starting

210
00:12:30,720 --> 00:12:37,110
with a string and then I'm concatenating on the number one, a boolean value, a character value,a double

211
00:12:37,110 --> 00:12:39,890
precision value and a long value all together.

212
00:12:40,230 --> 00:12:43,690
And when we print all of that out we get exactly what you would expect.

213
00:12:43,710 --> 00:12:47,480
Here is a mess followed by all this stuff jammed together in the form of a string.

214
00:12:47,650 --> 00:12:51,510
And that all this happens automatically.

215
00:12:51,510 --> 00:12:52,180
All right.

