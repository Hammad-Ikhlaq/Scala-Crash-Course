1
00:00:00,450 --> 00:00:05,160
Now sometimes you need to format numerical output and you might be familiar with the print style of

2
00:00:05,160 --> 00:00:08,290
output in other languages, scala supports that too.

3
00:00:08,310 --> 00:00:10,150
But the syntax is a little bit strange.

4
00:00:10,530 --> 00:00:17,130
So what you do if you want to do formatting of that nature?. You need to prefix your string with the character

5
00:00:17,130 --> 00:00:22,860
f and that expands to a little macro that says I'm going to use a printf style format within this string

6
00:00:22,860 --> 00:00:24,040
.

7
00:00:24,090 --> 00:00:29,020
So here we're saying print line f meaning that I'm going to be formatting the text in here somehow.

8
00:00:29,100 --> 00:00:35,910
And I say pie's about that I have a dollar sign followed by the variable name that I'm going to be formatting,

9
00:00:36,000 --> 00:00:41,560
followed by a percent sign and then the print format for how I want to display that.

10
00:00:41,820 --> 00:00:47,460
So in this case I have a point free f meaning that I want to display a floating point value with three

11
00:00:47,460 --> 00:00:50,950
decimal points of precision on the right hand side of the decimal point.

12
00:00:51,030 --> 00:00:55,620
And if you're not familiar with that syntax you can go look up printf on the inter-webs and get

13
00:00:55,620 --> 00:00:59,990
more details but a pretty common tool for formatting your output.

14
00:01:00,030 --> 00:01:04,730
If you need to make sure that it's human readable and only has a reasonable amount of precision.

15
00:01:04,780 --> 00:01:08,620
And if we run that we see Sure enough pi is about 3.142.

16
00:01:08,850 --> 00:01:16,800
So that took the value of pi single precision which is 3.14159265, applied this formatting

17
00:01:16,800 --> 00:01:22,260
string to it .3f and that made sure that we only have three decimal points places of precision

18
00:01:22,740 --> 00:01:25,730
to the right of the decimal point.

19
00:01:25,740 --> 00:01:26,970
Here's another example.

20
00:01:26,970 --> 00:01:32,700
You can also use use the same trick for putting zero padding on the left of numbers sometimes that's

21
00:01:32,700 --> 00:01:35,190
useful for sorting strings for example.

22
00:01:35,190 --> 00:01:39,210
So in here we have the f prefix again dollar signed by the variable name.

23
00:01:39,210 --> 00:01:44,460
Number one in this case it's a an integer which is the number one.

24
00:01:44,700 --> 00:01:49,430
And we're using a percent sign followed by the formatting string which is 05d.

25
00:01:49,430 --> 00:01:58,200
That means that it is a integer value and the 05 means that I want 5 places of precision with zeros

26
00:01:58,200 --> 00:02:00,300
padding it in if necessary.

27
00:02:00,690 --> 00:02:04,160
And the output from that is with 5 decimal places.

28
00:02:04,190 --> 00:02:06,190
0 0 0 0 0 1.

29
00:02:06,490 --> 00:02:08,250
OK.

30
00:02:08,640 --> 00:02:08,880
All right.

31
00:02:08,880 --> 00:02:14,070
Another trick we can do is actually substitute in variables as part of our string as they're being constructed

32
00:02:14,070 --> 00:02:14,160
.

33
00:02:14,160 --> 00:02:20,970
So for that we use the s prefix and then anything that's preceded by a dollar sign will just be interpreted

34
00:02:20,970 --> 00:02:22,960
as a variable or a value name.

35
00:02:22,980 --> 00:02:29,430
So we have this as a prefix I can use the prefix to use variables like $numberOne that will

36
00:02:29,490 --> 00:02:35,360
pull in the integer value 1 up here, to $truth which should pull true and $letterA

37
00:02:35,370 --> 00:02:38,210
should put in the character A and sure enough it works.

38
00:02:38,370 --> 00:02:45,180
When we evaluate that we can use the s prefix to variables like one,two, a and you can also do fancier

39
00:02:45,180 --> 00:02:48,610
stuff. you can do more than just reference values and values and variables.

40
00:02:48,810 --> 00:02:52,300
Here's an example where we actually evaluate an expression.

41
00:02:52,470 --> 00:02:58,080
So again that dollar sign means I'm about to evaluate something and it might be variable or value name

42
00:02:58,080 --> 00:02:59,790
or it might be a whole expression.

43
00:02:59,790 --> 00:03:03,840
So if you put something within curly brackets that basically says I got a little bit of code here that

44
00:03:03,840 --> 00:03:06,410
I want to execute and you can put whatever you want in there.

45
00:03:06,410 --> 00:03:10,830
It might be like a little tiny little function even but in this case we're just going to add one plus

46
00:03:10,830 --> 00:03:13,510
two together and sure enough it works.

47
00:03:13,710 --> 00:03:17,730
When we actually run that we get three. The s prefixes isn't limited to variables I can include any expression like

48
00:03:17,780 --> 00:03:25,290
three. So dollar sign brackets one plus two just got converted to the value 3 inside that string

49
00:03:25,290 --> 00:03:30,690
automatically. So very handy tools for producing output when you're printing stuff out or writing to

50
00:03:30,690 --> 00:03:33,570
a file or what have you.

51
00:03:33,570 --> 00:03:35,870
All right the next section gets a little bit weird.

52
00:03:35,880 --> 00:03:39,980
So again if you want to rest your brain a little bit at that previous stuff sink in that's OK.

53
00:03:40,300 --> 00:03:45,630
Well let's move on now if you're familiar with regular expressions they can be a powerful tool for pattern

54
00:03:45,630 --> 00:03:49,450
matching strings and extracting information out of structured formatted data.

55
00:03:49,740 --> 00:03:54,540
So let's say you have for example an Apache access log that has a very specific format you might use

56
00:03:54,540 --> 00:04:00,510
a regular expression to extract fields out of that line of log information and we do that in this course

57
00:04:00,510 --> 00:04:02,600
later on quite a bit actually.

58
00:04:03,210 --> 00:04:08,570
So for example let's say I start with a string that has "To life the universe and everything is 42" and

59
00:04:08,580 --> 00:04:10,100
we're gonna call that string

60
00:04:10,110 --> 00:04:14,130
theUltimateAnswer. You read Douglas Adams you know what I'm talking about.

61
00:04:14,490 --> 00:04:15,130
.

62
00:04:15,330 --> 00:04:18,720
So the syntax for handling regular expressions in scala is really weird.

63
00:04:18,750 --> 00:04:19,360
OK.

64
00:04:19,890 --> 00:04:21,560
It's gonna blow your mind strange.

65
00:04:21,560 --> 00:04:22,260
Nothing I can do about it.

66
00:04:22,260 --> 00:04:24,340
Sorry to have to live with it.

67
00:04:24,390 --> 00:04:29,610
What we have is this strange triple quote syntax followed by a dot R and that basically means, I want

68
00:04:29,610 --> 00:04:33,750
to construct a regular expression out of the stuff in between the triple quotes.

69
00:04:34,080 --> 00:04:37,710
So if you're familiar with regular expressions you'll know what this all means.

70
00:04:37,800 --> 00:04:43,140
.* means extract a bunch of characters then look for a space and then we're going to look for

71
00:04:43,140 --> 00:04:50,240
one or more numbered characters that's what the backslash D-plus means followed by a

72
00:04:50,240 --> 00:04:51,140
bunch of other characters.

73
00:04:51,140 --> 00:04:56,800
So basically this is saying go look for the first number in this string.

74
00:04:57,210 --> 00:05:00,350
So I'm trying to suck out the 42 out of the string basically.

75
00:05:00,560 --> 00:05:03,350
Now regular expressions is a whole topic in itself.

76
00:05:03,350 --> 00:05:05,660
There are multiple O'Reilly books on the subject.

77
00:05:05,660 --> 00:05:09,110
They can do some very very fancy some very complicated things with them.

78
00:05:09,110 --> 00:05:14,150
So if you want to learn more about regular expressions go look on the Internet or try out the introduction

79
00:05:14,150 --> 00:05:15,310
to regular expressions.

80
00:05:15,320 --> 00:05:17,460
But from O'Reilly that's probably a good start.

81
00:05:17,720 --> 00:05:22,880
But odds are you've seen these before and if you haven't you can usually find the one you need on the

82
00:05:22,880 --> 00:05:26,970
internet. If you just look I'll provide you the ones you need in this course for log's for example.

83
00:05:26,990 --> 00:05:31,790
So don't get too hung up on the syntax but the way Orson's galaxy is pretty weird.

84
00:05:31,790 --> 00:05:39,080
So we have this this Regex that we created using this  .r operator here and what we're gonna do

85
00:05:39,080 --> 00:05:40,850
to apply that.

86
00:05:40,850 --> 00:05:41,950
It's really weird how this works.

87
00:05:41,990 --> 00:05:48,080
You take that regex and you pass in wherever you want to put the result that you extract information

88
00:05:48,080 --> 00:05:48,410
from.

89
00:05:48,410 --> 00:05:54,350
So we're going to basically try to pull out that number 42 from the string and put it into a new value

90
00:05:54,350 --> 00:05:55,880
called answerString.

91
00:05:56,210 --> 00:06:00,320
And then we use the equal sign to say well I want to run this on the string called theUltimateAnswer

92
00:06:00,320 --> 00:06:00,390
.

93
00:06:00,440 --> 00:06:05,120
And you know the syntax of this really defies human logic.

94
00:06:05,120 --> 00:06:06,550
You just have to kind of go with it.

95
00:06:06,590 --> 00:06:09,350
You know  it's something about Scala but I just don't like.

96
00:06:09,470 --> 00:06:13,400
But keep this work sheet around for word for reference so if you do need to do some regular expression

97
00:06:13,400 --> 00:06:18,830
stuff later on you'll have this to look at because it really doesn't make intuitive sense at all.

98
00:06:18,920 --> 00:06:24,290
Anyway what that does is it doesn't play that regular expression to the string extracts out that number

99
00:06:24,290 --> 00:06:28,060
42 and sticks it in the string answerString.

100
00:06:28,070 --> 00:06:32,320
Last thing we need to do is because that is a string but we really want to treat it as a number.

101
00:06:32,450 --> 00:06:37,080
We can call toInt on that string and extract the integer value 42.

102
00:06:37,160 --> 00:06:39,760
So toInt will convert any string to an integer.

103
00:06:39,980 --> 00:06:45,770
And you know like you might expect there's also twoFloat or you know whatever else you might need.

104
00:06:45,770 --> 00:06:47,420
Conversion operators are as well.

105
00:06:47,420 --> 00:06:48,850
Notice I didn't actually have to put an

106
00:06:48,860 --> 00:06:49,670
() .

107
00:06:49,670 --> 00:06:50,240
Empty print.

108
00:06:50,230 --> 00:06:50,880
See there.

109
00:06:51,020 --> 00:06:52,660
That's not actually necessary.

110
00:06:52,910 --> 00:06:54,370
And we get the answer we get 42.

111
00:06:54,410 --> 00:06:54,970
OK.

112
00:06:55,190 --> 00:06:58,730
So honestly this is about as weird as Scala gets.

113
00:06:58,730 --> 00:07:02,570
If you made it through that Scala it's all downhill from here.

114
00:07:02,630 --> 00:07:08,180
OK it's kind of easier as promised to with getting easier booleans work much as you would expect.

115
00:07:08,180 --> 00:07:11,730
So if you just want to compare two things if one is greater than two.

116
00:07:11,900 --> 00:07:13,420
Well no the answer is false.

117
00:07:13,430 --> 00:07:16,100
One is less than two will give you true.

118
00:07:16,130 --> 00:07:22,040
One thing that's a little bit ambiguous in some languages is what does one ampersand versus two ampersands

119
00:07:22,040 --> 00:07:23,750
or one pipe versus two pipe do?.

120
00:07:23,750 --> 00:07:28,030
You know what you're doing and or or comparison's you can do either one in Scala.

121
00:07:28,070 --> 00:07:34,020
The only difference is that if you use a single ampersand both expressions get evaluated and then you

122
00:07:34,100 --> 00:07:35,360
added together.

123
00:07:35,570 --> 00:07:39,600
Whereas if you use a double ampersand that means that it can actually bail early.

124
00:07:39,650 --> 00:07:43,790
So if isGreater were false it would actually not even bother evaluating isLesser at all.

125
00:07:43,820 --> 00:07:46,660
And we go left to right you know only as far as it needed to.

126
00:07:46,970 --> 00:07:52,070
So for performance you probably want to go the double ampersand usually but for safety a single one

127
00:07:52,070 --> 00:07:56,780
might be better because you might have some expression in there that you assume gets run and might not

128
00:07:56,780 --> 00:07:59,060
if you're using a double spread double ampersand.

129
00:07:59,330 --> 00:08:01,550
Either way here you get the same answer.

130
00:08:01,610 --> 00:08:03,410
You can't be greater and lesser At the same time.

131
00:08:03,410 --> 00:08:09,860
So both of these provide a result of false. String comparisons also something that works differently

132
00:08:09,860 --> 00:08:14,720
in different languages. In Scala it makes sense when you compare two strings using the equals equals

133
00:08:14,720 --> 00:08:15,680
operator.

134
00:08:15,680 --> 00:08:21,860
It actually compares the contents of the string and not the string objects themselves. so by setting one

135
00:08:21,860 --> 00:08:28,160
string equal to Picard and I have another string called bestCaptain that's also set to Picard.

136
00:08:28,160 --> 00:08:34,710
If I test Picard equal equal bestCaptain he compares the contents of those strings and says true.

137
00:08:34,970 --> 00:08:39,290
Well you know I don't want to get all nerdy on you and debate the values of Star Trek Captain captains,

138
00:08:39,320 --> 00:08:43,040
but believe that for an exercise to the reader shall we.

139
00:08:43,040 --> 00:08:43,630
All right.

140
00:08:43,790 --> 00:08:47,080
So that's less than one with scala a crash course some basic stuff here.

141
00:08:47,090 --> 00:08:52,400
All we did was cover you know the syntax for declaring mutable and immutable variables.

142
00:08:52,400 --> 00:08:57,770
We looked at some different boolean operators, some ways of printing out information applying regular

143
00:08:57,770 --> 00:08:58,710
expressions

144
00:08:59,120 --> 00:09:00,800
and you have what you need to do.

145
00:09:00,800 --> 00:09:01,570
The large size here.

146
00:09:01,580 --> 00:09:02,970
So make it real.

147
00:09:03,170 --> 00:09:07,850
So while you're in here like I said you can just add in code here it hit save and it will get evaluated

148
00:09:07,850 --> 00:09:09,380
right away so play around with it.

149
00:09:09,380 --> 00:09:14,560
My challenge to you is to write some code that takes the value of pi doubles it and then prints it within

150
00:09:14,570 --> 00:09:17,030
a string with three decimal places of precision to the right.

151
00:09:17,030 --> 00:09:21,100
So you should have enough examples within this work sheet to do that pretty easily.

152
00:09:21,110 --> 00:09:25,610
You know this isn't meant to be difficult but I just wanted to get your hands on with some Scala code

153
00:09:25,610 --> 00:09:25,970
.

154
00:09:25,970 --> 00:09:29,810
Actually get comfortable with the fact that yes you can write scala code yourself and actually make

155
00:09:29,810 --> 00:09:30,680
it run and operate.

156
00:09:30,680 --> 00:09:33,670
So please do that  exercise even though it does seem trivial.

157
00:09:33,890 --> 00:09:35,490
It will be helpful.

158
00:09:35,570 --> 00:09:39,290
So do that and we'll move on to the next lesson.

